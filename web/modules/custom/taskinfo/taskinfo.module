<?php

use Drupal\batchinfo\Content\RunImportJsonToNode;
use Drupal\batchinfo\Controller\BatchinfoController;

use Drupal\batchinfo\Content\SyncJsonToNode;

/**
 * Implements hook_cron().
 *
 * @see Drupal\taskinfo\Plugin\QueueWorker\EntityCreateDayQueue
 */
function taskinfo_cron() {
  $time_hour = date('G');
  $time_minute = date('i');
  if ($time_hour == '5' && $time_minute > '14' && $time_minute < '25') {
    _taskinfo_run_batch_create_node_with_piece_json();

    $message = '...Again taskinfo_cron on ' . $time_hour;
    \Drupal::logger('taskinfo')->notice($message);
  }

  // $code_tids = \Drupal::getContainer()
  //   ->get('flexinfo.term.service')
  //   ->getTidsFromVidName($vid = 'code');


  // _taskinfo_run_python_code();
  // _taskinfo_run_batch_create_node();

  // $queue = \Drupal::queue('entity_create_day_queue', TRUE);
  // $queue->createItem($code_tids);
}

/**
 * @see hook_cron().
 */
function _taskinfo_run_python_code() {
  // Build the command string
  $cmd = '/usr/local/bin/python3 modules/custom/python/get_hist_data_day.py';

  // Execute the script and store the output in a variable
  $py_output = shell_exec($cmd);

  drupal_set_message($py_output);
}

/**
 * @see hook_cron().
 */
function _taskinfo_run_batch_create_node() {
  $SyncJsonToNode = new SyncJsonToNode();
  $json_content = $SyncJsonToNode->getImportJsonContent();

  _taskinfo_excute_create_nodes_by_json($json_content);
}

/**
 * @see hook_cron().
 */
function _taskinfo_run_batch_create_node_with_piece_json() {
  $SyncJsonToNode = new SyncJsonToNode();
  $json_content = $SyncJsonToNode->getAllPiecesJsonContent();

  _taskinfo_excute_create_nodes_by_json($json_content);
}

/**
 * @see hook_cron().
 */
function _taskinfo_excute_create_nodes_by_json($json_content) {
  $SyncJsonToNode = new SyncJsonToNode();

  $every_time_excute_max_number = 2;
  $chunk = array_chunk($json_content, $every_time_excute_max_number, TRUE);

  foreach ($chunk as $key => $row) {
    foreach ($row as $subkey => $subrow) {
      $SyncJsonToNode->runBatchinfoCreateNodeEntity($subkey, $subrow);
    }

    // sleep for 0.2 seconds
    usleep(300000);
  }
}
